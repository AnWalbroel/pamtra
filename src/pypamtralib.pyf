!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module pyPamtraLib ! in 
    interface  ! in :pyPamtraLib
        module report_module ! in :pyPamtraLib:report_module.f90
            use vars_index, only: i_f,i_h,i_z,i_y,i_x
            use kinds
            integer(kind=long_bn), parameter,optional :: info=3
            integer(kind=long_bn), parameter,optional :: fatal=2
            integer(kind=long_bn), parameter,optional :: nstatus=3
            integer(kind=long_bn), optional :: verbose=0
            integer(kind=long_bn), parameter,optional :: success=0
            character(len=7), parameter,optional,dimension(4),depend(info,fatal,success,warning) :: status_text=(/'success','warning','fatal','info'/)
            integer(kind=long_bn), parameter,optional :: warning=1
            subroutine report(status,message,nameofroutine) ! in :pyPamtraLib:report_module.f90:report_module
                integer(kind=long_bn) intent(in) :: status
                character*(*) intent(in) :: message
                character*(*) intent(in) :: nameofroutine
            end subroutine report
            subroutine assert_true(error,logic,message) ! in :pyPamtraLib:report_module.f90:report_module
                integer intent(inout) :: error
                logical intent(in) :: logic
                character*(*) intent(in) :: message
            end subroutine assert_true
            subroutine assert_false(error,logic,message) ! in :pyPamtraLib:report_module.f90:report_module
                integer intent(inout) :: error
                logical intent(in) :: logic
                character*(*) intent(in) :: message
            end subroutine assert_false
        end module report_module
        module deallocate_everything ! in :pyPamtraLib:deallocate_everything.f90
            subroutine do_deallocate_everything(errorstatus) ! in :pyPamtraLib:deallocate_everything.f90:deallocate_everything
                use kinds
                use vars_jacobian, only: deallocate_jacobian_vars
                use vars_output, only: deallocate_output_vars
                use vars_atmosphere, only: deallocate_atmosphere_vars
                use descriptor_file, only: deallocate_descriptor_file
                use vars_rt, only: deallocate_rt_vars
                use report_module
                use drop_size_dist, only: deallocatevars_drop_size_dist
                use scatproperties, only: deallocate_scatproperties
                use vars_hydrofullspec, only: deallocate_hydrofs_vars
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine do_deallocate_everything
        end module deallocate_everything
        module vars_output ! in :pyPamtraLib:vars_output.f90
            use report_module
            use kinds
            use settings, only: att_npol,radar_nfft,radar_npol
            real(kind=dbl), allocatable,dimension(:,:,:,:,:,:) :: out_radar_edges
            real(kind=dbl), allocatable,dimension(:) :: out_debug_radarvel
            real(kind=dbl), allocatable,dimension(:) :: out_radar_vel
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_att_hydro
            real(kind=dbl), allocatable,dimension(:,:,:,:,:,:) :: out_radar_slopes
            real(kind=dbl), allocatable,dimension(:,:,:,:,:,:) :: out_radar_moments
            real(kind=dbl), allocatable,dimension(:) :: out_debug_radarback_wturb_wnoise
            real(kind=dbl), allocatable,dimension(:,:,:,:,:,:) :: out_tb
            real(kind=dbl), allocatable,dimension(:,:,:) :: out_radar_hgt
            real(kind=dbl), allocatable,dimension(:) :: out_angles_deg
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_ze
            real(kind=dbl) dimension(300) :: out_debug_back_of_d
            real(kind=dbl), allocatable,dimension(:) :: out_debug_radarback_wturb
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_psd_area
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_radar_snr
            real(kind=dbl) dimension(300) :: out_debug_diameter
            integer, allocatable,dimension(:,:,:,:,:) :: out_radar_quality
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_psd_mass
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_psd_d
            real(kind=dbl), allocatable,dimension(:,:,:,:,:,:) :: out_radar_spectra
            real(kind=dbl), allocatable,dimension(:) :: out_debug_radarback
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: out_att_atmo
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: out_psd_n
            subroutine allocate_output_vars(errorstatus,no_allocated_lyrs) ! in :pyPamtraLib:vars_output.f90:vars_output
                use vars_atmosphere
                use descriptor_file, only: nbin_arr,n_hydro
                use mod_io_strings
                use settings, only: ,write_nc,radar_mode,passive,active,save_psd
                integer(kind=long_bn) intent(out) :: errorstatus
                integer intent(in) :: no_allocated_lyrs
            end subroutine allocate_output_vars
            subroutine deallocate_output_vars ! in :pyPamtraLib:vars_output.f90:vars_output
                use vars_atmosphere
            end subroutine deallocate_output_vars
        end module vars_output
        module vars_atmosphere ! in :pyPamtraLib:vars_atmosphere.f90
            use report_module
            use kinds
            use settings, only: maxfreq
            integer(kind=long_bn), allocatable,dimension(:,:) :: atmo_unixtime
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_hgt
            character(len=4), allocatable,dimension(:,:) :: atmo_time
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_temp_lev
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_press_lev
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_hydro_n_column
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_lfrac
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_hgt_lev
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_obs_height
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_airturb
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_vapor_pressure
            character(len=4), allocatable,dimension(:,:) :: atmo_year
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_relhum_lev
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: atmo_hydro_reff
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_temp
            integer(kind=long_bn) :: atmo_ngridy
            integer(kind=long_bn) :: atmo_ngridx
            real(kind=dbl), allocatable,dimension(:,:) :: atmo_groundtemp
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_hydro_reff_column
            real(kind=sgl) :: cwp
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_radar_prop
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_wind_w
            real(kind=dbl), allocatable,dimension(:,:) :: atmo_iwv
            integer(kind=long_bn), allocatable,dimension(:,:) :: atmo_model_i
            integer(kind=long_bn), allocatable,dimension(:,:) :: atmo_model_j
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_lon
            real(kind=sgl) :: gwp
            real(kind=sgl) :: swp
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_hydro_q_column
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_rho_vap
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_delta_hgt_lev
            character(len=3) :: atmo_input_type
            character(len=2), allocatable,dimension(:,:) :: atmo_month
            real(kind=sgl) :: rwp
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_q_hum
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_relhum
            integer(kind=long_bn), allocatable,dimension(:,:) :: atmo_nlyrs
            real(kind=sgl) :: iwp
            integer(kind=long_bn) :: atmo_max_nlyrs
            real(kind=sgl) :: hwp
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_wind10u
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_wind10v
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: atmo_hydro_n
            character(len=2), allocatable,dimension(:,:) :: atmo_day
            real(kind=dbl), allocatable,dimension(:,:,:) :: atmo_press
            real(kind=sgl), allocatable,dimension(:,:) :: atmo_lat
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: atmo_hydro_q
            subroutine screen_input(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro,moment_in_arr
                use settings, only: nc_out_file,input_path,verbose,input_file,output_path,obs_height,file_desc,freq_str
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine screen_input
            subroutine allocate_atmosphere_vars(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine allocate_atmosphere_vars
            subroutine deallocate_atmosphere_vars ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
            end subroutine deallocate_atmosphere_vars
            subroutine read_new_fill_variables(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro,moment_in_arr
                use settings, only: radar_mode,active,input_path,verbose,input_file
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine read_new_fill_variables
            subroutine add_obs_height(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro,moment_in_arr
                use constants, only: r_d,r_v
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine add_obs_height
            subroutine read_classic_fill_variables(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro,moment_in_arr
                use settings, only: obs_height,input_path,verbose,input_file
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine read_classic_fill_variables
            subroutine fillmissing_atmosphere_vars(errorstatus) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                use descriptor_file, only: n_hydro,moment_in_arr
                use constants, only: r_d,r_v
                use settings, only: obs_height
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine fillmissing_atmosphere_vars
            subroutine print_out_layer(i,j) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                integer(kind=long_bn) :: i
                integer(kind=long_bn) :: j
            end subroutine print_out_layer
            subroutine print_out_level(i,j) ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
                integer(kind=long_bn) :: i
                integer(kind=long_bn) :: j
            end subroutine print_out_level
            subroutine print_vars_atmosphere ! in :pyPamtraLib:vars_atmosphere.f90:vars_atmosphere
            end subroutine print_vars_atmosphere
        end module vars_atmosphere
        module settings ! in :pyPamtraLib:settings.f90
            use report_module
            use kinds
            character(len=300) :: nc_out_file
            integer(kind=long_bn) :: radar_nfft
            character(len=100) :: input_path
            character(len=10) :: tmatrix_db
            character(len=8) :: radar_mode
            integer(kind=long_bn) :: radar_no_ave
            real(kind=dbl) :: radar_min_spectral_snr
            logical :: jacobian_mode
            character(len=9) :: frq_str_s
            integer, parameter,optional :: maxnleg=200
            logical :: radar_airmotion
            real(kind=dbl) :: hydro_softsphere_min_density
            character(len=9) :: frq_str_e
            real(kind=dbl) :: obs_height
            logical :: lphase_flag
            character(len=1), parameter,optional :: deltam='n'
            logical :: lgas_extinction
            character(len=2) :: outpol
            integer(kind=long_bn) :: radar_npol
            logical :: dump_to_file
            integer, parameter,optional :: src_code=2
            logical :: passive
            character(len=100) :: crm_data
            real(kind=dbl) :: hydro_threshold
            integer(kind=long_bn) :: radar_aliasing_nyquist_interv
            character(len=1), parameter,optional :: quad_type='l'
            real(kind=dbl) :: radar_k2
            integer(kind=long_bn) :: radar_npeaks
            logical :: hydro_limit_density_area
            logical :: add_obs_height_to_layer
            real(kind=dbl) :: radar_airmotion_step_vmin
            character(len=2) dimension(5) :: radar_pol
            character(len=100) :: crm_data2
            character(len=100) :: crm_constants
            character(len=10) :: input_type
            integer(kind=long_bn) :: radar_nfft_aliased
            character(len=1) dimension(5) :: att_pol
            character(len=15) :: radar_polarisation
            real(kind=dbl), parameter,optional :: direct_mu=0._dbl
            real(kind=dbl) :: radar_noise_distance_factor
            integer(kind=long_bn) :: randomseed
            logical :: radar_save_noise_corrected_spectra
            integer(kind=long_bn) :: n_moments
            integer(kind=long_bn) :: radar_airmotion_linear_steps
            real(kind=dbl) dimension(100) :: freqs
            integer(kind=long_bn) :: radar_maxturbterms
            character(len=10) :: radar_attenuation
            real(kind=dbl) :: radar_airmotion_vmax
            character(len=100) :: output_path
            integer, parameter,optional :: noutlevels=2
            integer, parameter,optional :: numazimuths=1
            character(len=18) :: freq_str
            character(len=20) :: file_desc
            real(kind=dbl) :: radar_airmotion_vmin
            character(len=100) :: creator
            character(len=8) :: radar_airmotion_model
            logical :: hydro_adaptive_grid
            real(kind=dbl) :: radar_pnoise0
            character(len=100) :: data_path
            character(len=300) :: tmatrix_db_path
            integer, parameter,optional :: aziorder=0
            character(len=300) :: namelist_file
            character(len=1) :: ground_type
            character(len=10) :: crm_case
            logical :: write_nc
            integer, parameter,optional :: nummu=16
            real(kind=dbl) :: radar_min_v
            integer, parameter,optional :: maxv=64
            character(len=100) :: tmp_path
            character(len=1) :: units
            character(len=3) :: gas_mod
            character(len=20) :: moments_file
            real(kind=dbl) :: radar_receiver_uncertainty_std
            logical :: save_psd
            integer, parameter,optional :: nstokes=2
            integer(kind=long_bn) :: att_npol
            character(len=99) :: input_file
            logical :: radar_use_hildebrand
            logical :: radar_convolution_fft
            character(len=300) :: descriptor_file_name
            logical :: active
            integer, parameter,optional :: maxlay=600
            real(kind=dbl) :: radar_max_v
            character(len=8) dimension(100) :: frqs_str
            real(kind=dbl), parameter,optional :: direct_flux=0._dbl
            logical :: in_python
            logical :: lhyd_extinction
            integer(kind=long_bn) :: nfrq
            real(kind=dbl) :: salinity
            logical :: radar_smooth_spectrum
            integer, parameter,optional :: maxfreq=100
            integer, parameter,optional :: maxleg=200
            logical :: hydro_fullspec
            real(kind=dbl) :: emissivity
            subroutine settings_read(errorstatus) ! in :pyPamtraLib:settings.f90:settings
                use kinds
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine settings_read
            subroutine test_settings(errorstatus) ! in :pyPamtraLib:settings.f90:settings
                use kinds
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine test_settings
            subroutine add_settings(errorstatus) ! in :pyPamtraLib:settings.f90:settings
                use kinds
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine add_settings
            subroutine settings_fill_default ! in :pyPamtraLib:settings.f90:settings
                use kinds
            end subroutine settings_fill_default
            subroutine print_settings ! in :pyPamtraLib:settings.f90:settings
            end subroutine print_settings
        end module settings
        module descriptor_file ! in :pyPamtraLib:descriptor_file.f90
            use report_module
            use kinds, only: dbl,long
            use settings, only: descriptor_file_name
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: a_ms_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: as_ratio_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: rho_ms_arr
            integer(kind=long_bn), allocatable,dimension(:) :: moment_in_arr
            real(kind=dbl), allocatable,dimension(:) :: n_tot_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: beta_as_arr
            character(len=15), allocatable,dimension(:) :: hydro_name_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: descriptor_canting_arr
            real(kind=dbl), allocatable,dimension(:) :: r_eff_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: b_ms_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: d_1_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: p_2_arr
            integer(kind=long_bn), allocatable,dimension(:) :: liq_ice_arr
            character(len=30), allocatable,dimension(:) :: vel_size_mod_arr
            character(len=15), allocatable,dimension(:) :: dist_name_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: p_4_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: p_1_arr
            integer(kind=long_bn) :: n_hydro
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: p_3_arr
            integer(kind=long_bn), allocatable,dimension(:,:,:,:) :: nbin_arr
            real(kind=dbl), allocatable,dimension(:) :: q_h_arr
            character(len=15), allocatable,dimension(:) :: scat_name_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: d_2_arr
            real(kind=dbl), allocatable,dimension(:,:,:,:) :: alpha_as_arr
            subroutine read_descriptor_file(errorstatus) ! in :pyPamtraLib:descriptor_file.f90:descriptor_file
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine read_descriptor_file
            subroutine allocate_descriptor_file(errorstatus) ! in :pyPamtraLib:descriptor_file.f90:descriptor_file
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine allocate_descriptor_file
            subroutine deallocate_descriptor_file ! in :pyPamtraLib:descriptor_file.f90:descriptor_file
            end subroutine deallocate_descriptor_file
            subroutine printdescriptorvars ! in :pyPamtraLib:descriptor_file.f90:descriptor_file
            end subroutine printdescriptorvars
        end module descriptor_file
        module vars_hydrofullspec ! in :pyPamtraLib:vars_hydroFullSpec.f90
            use report_module
            use kinds
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_area_ds
            integer(kind=long_bn) :: hydrofs_nbins
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_d_bound_ds
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_canting
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_mass_ds
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_n_ds
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_as_ratio
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_rho_ds
            real(kind=dbl), allocatable,dimension(:,:,:,:,:) :: hydrofs_d_ds
            subroutine allocate_hydrofs_vars(errorstatus,nbins) ! in :pyPamtraLib:vars_hydroFullSpec.f90:vars_hydrofullspec
                use vars_atmosphere, only: atmo_ngridy,atmo_ngridx,atmo_max_nlyrs
                use descriptor_file, only: n_hydro
                integer(kind=long_bn) intent(out) :: errorstatus
                integer intent(in) :: nbins
            end subroutine allocate_hydrofs_vars
            subroutine deallocate_hydrofs_vars ! in :pyPamtraLib:vars_hydroFullSpec.f90:vars_hydrofullspec
            end subroutine deallocate_hydrofs_vars
            subroutine print_hydrofs_vars ! in :pyPamtraLib:vars_hydroFullSpec.f90:vars_hydrofullspec
                use vars_atmosphere, only: atmo_ngridy,atmo_ngridx,atmo_max_nlyrs
                use descriptor_file, only: n_hydro
            end subroutine print_hydrofs_vars
        end module vars_hydrofullspec
        module pypamtralib ! in :pyPamtraLib:pyPamtraLib.f90
            use vars_index, only: i_f,i_h,i_z,i_y,i_x
            use descriptor_file
            use kinds, only: long
            use vars_jacobian, only: deallocate_jacobian_vars,allocate_jacobian_vars
            use vars_output
            use vars_atmosphere
            use settings
            use report_module
            use double_moments_module
            character(len=40) :: gitversion
            character(len=40) :: githash
            subroutine run_pamtra(errorstatus) ! in :pyPamtraLib:pyPamtraLib.f90:pypamtralib
                use mod_io_strings, only: formatted_frqstr
                integer(kind=long_bn) intent(out) :: errorstatus
            end subroutine run_pamtra
        end module pypamtralib
    end interface 
end python module pyPamtraLib

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
